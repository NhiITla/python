- tdd: write the test that drive development
- mocking: avoid relying on external service
           make test unpredictable and inconsistent
          
          - avoid unintended consequences
            accidentally sending emails
            overloading external services
          - EX: avoid sending email for use in email function


- Testing API: 
          - Using the API client
          - Create APIClient
- Common testing problem: tests not running, ran less tests than you have
      - missing __init__.py in tests  dir
      - indentation of test cases
      - Import Error in the test

# ----------------------------------------------------------------------
Database :
  - POSTGRESSQL
    - Popular open source DB
    - Integrates well with Django

  - Docker COMPOSE
    - Defined with project (re-usable)
    - Persistent data using volumes 
    - Handles network configuration
    - Environment variable configuration
    
# ...........................................................................
Docker Compose ______> App <---> Database need height weight version
volumes: persistent data
          maps directory in container to local machine

#---- Django should know abt PostgresSQL
ENGINE
Host
Name
User 
Password
=> store it in env

- env: pull config values from environment variable
      - easy passed to Docker
      - Used in local dev or prod

- psycopg2:
  Most popular Postgres SQL for python
  psycopg2-binary:
    -OK for development + Not good for PROD
- Psycopg2 :
    -Compiles from source
    -required additional dependencies
    -easy to install with Docker
    -list od dependencies
      C compiler
      python3-dev
      libqp-dev
    Equivalent packages for Alpine
    Postgresql-clien
    build-base
    postgresql
    mustl-dev

-docker delete all dependencies (clean up)

- install PostgresSQL adaptor
- Problem with Docker compose:
  - using depends on: ensure service starts
  -> does not ensure application is running
  SOLUTION:
  check for dv available
  continue when db is ready
  


def handle(self, *args, **options):
mock ?
patch?

- Django ORM:
  Object Relational Mapper ORM
  Abstraction layer of data:
    handle db structure and changes
    focus on Python code
    use any db (within reason)

- Using the ORM :
  define models -> generate migration files -> set up db ->store data

- model:
  each model maps to a table
  model contain : name, fields, other meta data
  custom python logic

  + create migration:
  ensue app is enable in setting.py
  use django CLI
    python manage.py makemigration

- Django user model :
  - build in function / default user model (username instead of email)
  - not easy to custom

  -create a custom model for new project :
    create model -> base from AstractBase User and PermissionMixin
    create custom manager -> create custom manager ->...
    
  # --------------------------------
  - Design custom user model : user, is arrived,...
  - Design model manager: used to manage object, custom logic for creating object (hash pass)
  - base user manager : 
  https://docs.djangoproject.com/en/3.2/topics/testing/tools/#overview-and-a-quick-example

  https://docs.djangoproject.com/en/3.1/ref/contrib/admin/#reversing-admin-urls

  - API DOCUMENT:
    what to document:
      + everything needed to use the API
      + available endpoints (path)

      + supported method (GET/POST/PUT/PATCH/DELETE)
      + format of payloads (inputs parameters)
      + post json format
      + response output (format,..)
      + Authentication process

    Options for documentations:
      _word doc
      _markdown
      _automated (use metadata from code/ comments)
      _> using tool 

    Docs in DRF :
      drf-spectacular
      generate schema/ browsable web interface/ make test request/ handle auth

      how it works:
      gen schema -> parse schema into GUI
      OpenAPI Schema (standard) swagger

# - User API (registration/ creating user/ manage)
- Endpoints: 
  user/create: POST register new user
  user/token: POST create new token
  user/me: PUT/ PATCH Update profile
           GET - get user profile

  extra_kwargs ?
  serializer ?

# - AUTHENTICATION-------------------
- basic : username + password --> bad
- token: Use token in the http header :
  - balance of simplicity and security
  - support out of the box by DRF
  - well support 

  Create token (username+pass) --->store token on client (localstorage/ cookie) ---> include token in http headers
  cons: 

- JSON WEB TOKEN (JWT):
  Use an access and refresh token (scalable, milion request)
- session: use cookie